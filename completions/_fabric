#compdef fabric

# Helper function to list available patterns
_fabric_patterns() {
    local patterns_dir="${HOME}/.config/fabric/patterns"
    if [[ -d "$patterns_dir" ]]; then
        local -a patterns
        for pattern in $patterns_dir/*; do
            patterns+="$(basename $pattern)"
        done
        compadd -X "Available patterns:" $patterns
    fi
}

# Helper function for language codes
_fabric_languages() {
    local -a languages
    languages=(
        'en:English'
        'es:Spanish'
        'fr:French'
        'de:German'
        'it:Italian'
        'pt:Portuguese'
        'ru:Russian'
        'jp:Japanese'
        'ko:Korean'
        'cn:Chinese'
        'ar:Arabic'
    )
    _describe -t languages 'output language' languages
}

# Cache the models in a temporary file
_fabric_cache_models() {
    local cache_file="/tmp/fabric_models_cache"
    local current_time=$(date +%s)
    local cache_time=0
    local cache_age=3600  # Cache validity in seconds (1 hour)

    if [[ -f "$cache_file" ]]; then
        if command -v stat >/dev/null 2>&1; then
            if stat -f %m "$cache_file" >/dev/null 2>&1; then
                cache_time=$(stat -f %m "$cache_file")
            else
                cache_time=$(stat -c %Y "$cache_file")
            fi
        fi
    fi

    if [[ ! -f "$cache_file" ]] || (( current_time - cache_time > cache_age )); then
        fabric --listmodels 2>/dev/null > "$cache_file"
    fi

    if [[ -f "$cache_file" ]]; then
        cat "$cache_file"
    fi
}

# Helper function to parse and format models
_fabric_models() {
    local models_raw
    local -a model_list
    
    models_raw=(${(f)"$(_fabric_cache_models)"})
    
    if (( ${#models_raw} > 0 )); then
        local current_provider=""
        
        for line in $models_raw; do
            if [[ $line =~ '\[(.*?)\]\s+(.*)' ]]; then
                local model_name="${match[2]}"
                model_list+=("$model_name:${current_provider} model")
            elif [[ $line == "Anthropic" || $line == "Groq" || $line == "OpenAI" ]]; then
                current_provider=$line
            fi
        done
        
        if (( ${#model_list} > 0 )); then
            _describe -t models 'AI model' model_list
        else
            local -a fallback_models=(
                'claude-3-haiku-20240307:Anthropic model'
                'claude-3-opus-20240229:Anthropic model'
                'llama3-70b-8192:Groq model'
                'mixtral-8x7b-32768:Groq model'
                'gpt-4:OpenAI model'
                'gpt-3.5-turbo:OpenAI model'
            )
            _describe -t models 'AI model' fallback_models
        fi
    fi
}

# Helper function for YouTube URL completion
_fabric_youtube_url() {
    local -a youtube_urls
    youtube_urls=('https://www.youtube.com/watch?v=:YouTube video URL (replace with video code)')
    _describe -t youtube 'YouTube URL' youtube_urls
}

_fabric() {
    local curcontext="$curcontext" state line ret=1
    local -a args
    
    args=(
        '-y[Process YouTube content]:URL:_fabric_youtube_url'
        {-p,--pattern}'[Select pattern]:pattern:_fabric_patterns'
        {-m,--model}'[Select AI model]:model:_fabric_models'
        {-g,--language}'[Select output language]:language:_fabric_languages'
        '--listmodels[List available AI models]'
    )

    _arguments -C $args && ret=0

    return ret
}

compdef _fabric fabric
