#compdef fabric

# Helper function to list available patterns
_fabric_patterns() {
    local patterns_dir="${HOME}/.config/fabric/patterns"
    if [[ -d "$patterns_dir" ]]; then
        local -a patterns
        for pattern in $patterns_dir/*; do
            patterns+="$(basename $pattern)"
        done
        compadd -X "Available patterns:" $patterns
    fi
}

# Helper function for language codes
_fabric_languages() {
    local -a languages
    languages=(
        'en' 'es' 'fr' 'de' 'it' 'pt'
        'ru' 'jp' 'ko' 'cn' 'ar'
    )
    compadd -X "Available languages:" $languages
}

# Cache the models in a temporary file
_fabric_cache_models() {
    local cache_file="/tmp/fabric_models_cache"
    local current_time=$(date +%s)
    local cache_time=0
    local cache_age=3600  # Cache validity in seconds (1 hour)

    # Get cache file modification time if it exists
    if [[ -f "$cache_file" ]]; then
        if command -v stat >/dev/null 2>&1; then
            if stat -f %m "$cache_file" >/dev/null 2>&1; then
                cache_time=$(stat -f %m "$cache_file")
            else
                cache_time=$(stat -c %Y "$cache_file")
            fi
        fi
    fi

    # Check if we need to update cache
    if [[ ! -f "$cache_file" ]] || (( current_time - cache_time > cache_age )); then
        fabric --listmodels 2>/dev/null > "$cache_file"
    fi

    # Return cached content
    if [[ -f "$cache_file" ]]; then
        cat "$cache_file"
    fi
}

# Helper function to parse and format models
_fabric_models() {
    local models_raw
    local -a model_list
    
    models_raw=(${(f)"$(_fabric_cache_models)"})
    
    if (( ${#models_raw} > 0 )); then
        local current_provider=""
        
        for line in $models_raw; do
            # Check if line is a provider header
            if [[ $line == "Anthropic" || $line == "Groq" || $line == "OpenAI" ]]; then
                current_provider=$line
                continue
            fi
            
            # Extract model name from lines with [number] prefix
            if [[ $line =~ '\[(.*?)\]\s+(.*)' ]]; then
                local model_name="${match[2]}"
                model_list+=("$model_name")
            fi
        done
        
        # If we got models, use them
        if (( ${#model_list} > 0 )); then
            compadd -X "Available models:" $model_list
        else
            # Fallback if parsing failed
            compadd -X "Available models:" \
                'claude-3-haiku-20240307' \
                'claude-3-opus-20240229' \
                'llama3-70b-8192' \
                'mixtral-8x7b-32768' \
                'gpt-4' \
                'gpt-3.5-turbo'
        fi
    else
        # Fallback if cache is empty
        compadd -X "Available models:" \
            'claude-3-haiku-20240307' \
            'claude-3-opus-20240229' \
            'llama3-70b-8192' \
            'mixtral-8x7b-32768' \
            'gpt-4' \
            'gpt-3.5-turbo'
    fi
}

_fabric() {
    local context state line
    typeset -A opt_args

    _arguments -C \
        '-y[Process YouTube content]' \
        '--pattern[Select pattern]: :_fabric_patterns' \
        '--model[Select AI model]: :_fabric_models' \
        '-g[Select language]: :_fabric_languages' \
        '*: :->args'

    case $state in
        args)
            local -a remaining_opts
            if [[ ${line[(i)--pattern]} -gt ${#line} ]]; then
                remaining_opts+=('--pattern' 'Select processing pattern')
            fi
            if [[ ${line[(i)--model]} -gt ${#line} ]]; then
                remaining_opts+=('--model' 'Select AI model')
            fi
            if [[ ${line[(i)-g]} -gt ${#line} ]]; then
                remaining_opts+=('-g' 'Select language')
            fi
            
            if (( ${#remaining_opts} > 0 )); then
                _describe -t remaining-opts 'remaining options' remaining_opts
            fi
            ;;
    esac
}

compdef _fabric fabric
